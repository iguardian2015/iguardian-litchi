package com.litchi.iguardian;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.PowerManager;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class MainStudent extends Fragment {

	ImageView student_image;
	TextView student_name, class_name, student_birth_date, student_gender,
			student_address, student_father_name, student_mother_name,
			no_of_communication;
	ListView assignments;
	Button download;
	// TextView assignments;
	HttpPost httppost;
	StringBuffer buffer;
	HttpResponse response;
	HttpClient httpclient;
	List<NameValuePair> nameValuePairs;
	int i;
	String[] assign;
	SessionManagement session;
	String school, username, image_id;
	InputStream isr = null;
	String result = "";
	ProgressDialog mProgressDialog;

	private ProgressDialog simpleWaitDialog, simpleWaitDialog2;
	String downloadUrl;

	public MainStudent() {

	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View view = inflater.inflate(R.layout.costum_main_student, container,
				false);

		getActivity().setTitle("Student Profile");
		student_image = (ImageView) view.findViewById(R.id.student_image);
		student_name = (TextView) view.findViewById(R.id.student_name);
		class_name = (TextView) view.findViewById(R.id.student_class);
		student_birth_date = (TextView) view
				.findViewById(R.id.student_birth_date);
		student_gender = (TextView) view.findViewById(R.id.student_gender);
		student_address = (TextView) view.findViewById(R.id.student_address);
		student_father_name = (TextView) view
				.findViewById(R.id.student_father_name);
		student_mother_name = (TextView) view
				.findViewById(R.id.student_mother_name);
		no_of_communication = (TextView) view
				.findViewById(R.id.no_of_communication);

		download = (Button) view.findViewById(R.id.download);

		session = new SessionManagement(getActivity());

		
		//HashMap<Integer , Integer> num = session.getUserNumber();
		//i = num.get(SessionManagement.i);
		HashMap<String, String> user = session.getUserDetails();
		username = user.get(SessionManagement.KEY_NAME);
		school = user.get(SessionManagement.KEY_SCHOOL);
		//i = user.get(SessionManagement.i);

		mProgressDialog = new ProgressDialog(getActivity());
		mProgressDialog.setMessage("A message");
		mProgressDialog.setIndeterminate(true);
		mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
		mProgressDialog.setCancelable(true);

		//download.setVisibility(View.INVISIBLE);

		download.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {

				final DownloadTask downloadTask = new DownloadTask(
						getActivity());
				downloadTask
						.execute("http://npaneer.iguardianerp.co.in/test.pdf");

				mProgressDialog
						.setOnCancelListener(new DialogInterface.OnCancelListener() {
							@Override
							public void onCancel(DialogInterface dialog) {
								downloadTask.cancel(true);
							}
						});

			}
		}); // b.setOnC

		// image_id= "8";
		new dataget().execute();
		return view;
	}

	public class dataget extends AsyncTask<Void, Void, String> {

		@Override
		protected String doInBackground(Void... params) {
			getData(school, username);
			return null;
		}

		@Override
		protected void onPostExecute(String result) {

			try {
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(isr, "iso-8859-1"), 8);
				StringBuilder sb = new StringBuilder();
				String line = null;
				while ((line = reader.readLine()) != null) {
					sb.append(line + "\n");

				}
				isr.close();

				result = sb.toString();

			} catch (Exception e) {
				Log.e("log_tag", "Error coverting result " + e.toString());
				//InternetAlert();

			}
			try {

				JSONArray jArray = new JSONArray(result);

				for (int i = 0; i < jArray.length(); i++) {
					JSONObject json = jArray.getJSONObject(i);

					student_name.setText("" + json.getString("First_name")
							+ " " + json.getString("middle_name") + " "
							+ json.getString("last_name") + "");
					class_name.setText(""
							+ json.getString("class_name") + "");
					student_birth_date.setText(""
							+ json.getString("birth_date") + "");
					student_gender.setText(""
							+ json.getString("gender") + "");
					student_address.setText(""
							+ json.getString("address_line1") + " "
							+ json.getString("city") + " "
							+ json.getString("state") + "");
					student_father_name.setText(""
							+ json.getString("father_name") + "");
					student_mother_name.setText(""
							+ json.getString("mother_name") + "");
					no_of_communication.setText(""
							+ json.getString("no_of_communication") + "");
					image_id = "" + json.getString("student_id") + "";
					downloadUrl = "http://npaneer.iguardianerp.co.in/student_images/"
							+ image_id + ".jpg";
					new ImageDownloader().execute(downloadUrl);

				}

			} catch (Exception e) {
				Log.e("log_tag", "Error Parsing data " + e.toString());
				//InternetAlert();

			}
			simpleWaitDialog2.dismiss();
		}

		@Override
		protected void onPreExecute() {
			simpleWaitDialog2 = ProgressDialog.show(getActivity(), "Wait",
					"Connecting..");

		}

		@Override
		protected void onProgressUpdate(Void... values) {
		}

		void getData(String school, String username) {

			try {
				httpclient = new DefaultHttpClient();
				httppost = new HttpPost(
						"http://npaneer.iguardianerp.co.in/student_main.php");

				nameValuePairs = new ArrayList<NameValuePair>(2);
				// tv.setText("vhpppi");

				nameValuePairs
						.add(new BasicNameValuePair("username", username)); 

				nameValuePairs.add(new BasicNameValuePair("schoolSelected",
						school));
				// tv.setText("vhisjdskdj");
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

				HttpResponse response = httpclient.execute(httppost);
				HttpEntity entity = response.getEntity();
				isr = entity.getContent();

			} // try terminated

			catch (Exception e) {
				// dialog.dismiss();
				InternetAlert();
				System.out.println("Exception : " + e.getMessage());
			}

		}
	}

	private class ImageDownloader extends AsyncTask<String, Void, Bitmap> {

		@Override
		protected Bitmap doInBackground(String... param) {
			// TODO Auto-generated method stub

			return downloadBitmap(param[0]);

		}

		@Override
		protected void onPreExecute() {
			Log.i("Async-Example", "onPreExecute Called");
			simpleWaitDialog = ProgressDialog.show(getActivity(), "Wait",
					"Connecting..");

		}

		@Override
		protected void onPostExecute(Bitmap result) {
			Log.i("Async-Example", "onPostExecute Called");
			student_image.setImageBitmap(result);
			simpleWaitDialog.dismiss();

		}

		private Bitmap downloadBitmap(String url) {
			// initilize the default HTTP client object
			final DefaultHttpClient client = new DefaultHttpClient();

			// forming a HttoGet request
			final HttpGet getRequest = new HttpGet(url);
			try {

				HttpResponse response = client.execute(getRequest);

				// check 200 OK for success
				final int statusCode = response.getStatusLine().getStatusCode();

				if (statusCode != HttpStatus.SC_OK) {
					Log.w("ImageDownloader", "Error " + statusCode
							+ " while retrieving bitmap from " + url);
					return null;

				}

				final HttpEntity entity = response.getEntity();
				if (entity != null) {
					InputStream inputStream = null;
					try {
						// getting contents from the stream
						inputStream = entity.getContent();

						// decoding stream data back into image Bitmap that
						// android understands
						final Bitmap bitmap = BitmapFactory
								.decodeStream(inputStream);

						return bitmap;
					} finally {
						if (inputStream != null) {
							inputStream.close();
						}
						entity.consumeContent();
					}
				}
			} catch (Exception e) {
				// You Could provide a more explicit error message for
				// IOException
				getRequest.abort();
				InternetAlert();
				Log.e("ImageDownloader", "Something went wrong while"
						+ " retrieving bitmap from " + url + e.toString());
			}

			return null;
		}

	}

	// void

	public void InternetAlert() {
		getActivity().runOnUiThread(new Runnable() {
			public void run() {
				AlertDialog.Builder builder = new AlertDialog.Builder(
						getActivity());
				builder.setTitle("Connection Error");
				builder.setMessage("Check Internet Connection")
						.setCancelable(false)
						.setPositiveButton("OK",
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int id) {
									}
								});
				AlertDialog alert = builder.create();
				alert.show();
			}
		}); // on click terminated
	}//
	
	
private class DownloadTask extends AsyncTask<String, Integer, String> {
		
		
		private Context context;
		private PowerManager.WakeLock mWakeLock;
		

		public DownloadTask(Context context) {
			this.context = context;
			Log.i("break","1" );
		}

		@Override
		protected String doInBackground(String... sUrl) {
			InputStream input = null;
			OutputStream output = null;
			HttpURLConnection connection = null;
			Log.i("break","5" );
			try {
				URL url = new URL(sUrl[0]);
				connection = (HttpURLConnection) url.openConnection();
				connection.connect();
				Log.i("break","6" );
				// expect HTTP 200 OK, so we don't mistakenly save error report
				// instead of the file
				if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
					return "Server returned HTTP "
							+ connection.getResponseCode() + " "
							+ connection.getResponseMessage();
				}

				// this will be useful to display download percentage
				// might be -1: server did not report the length
				int fileLength = connection.getContentLength();

				// download the file
				input = connection.getInputStream();
				output = new FileOutputStream("/sdcard/test.pdf");

				byte data[] = new byte[4096];
				long total = 0;
				int count;
				while ((count = input.read(data)) != -1) {
					// allow canceling with back button
					if (isCancelled()) {
						input.close();
						return null;
					}
					total += count;
					// publishing the progress....
					if (fileLength > 0) // only if total length is known
						publishProgress((int) (total * 100 / fileLength));
					output.write(data, 0, count);
				}
			} catch (Exception e) {
				return e.toString();
			} finally {
				try {
					if (output != null)
						output.close();
					if (input != null)
						input.close();
				} catch (IOException ignored) {
				}

				if (connection != null)
					connection.disconnect();
			}
			return null;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			Log.i("break","2" );
			// take CPU lock to prevent CPU from going off if the user
			// presses the power button during download
			PowerManager pm = (PowerManager) context
					.getSystemService(Context.POWER_SERVICE);
			mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
					getClass().getName());
			mWakeLock.acquire();
			Log.i("break","3" );
			//mProgressDialog.show();
			Log.i("break","4" );
		}

		@Override
		protected void onProgressUpdate(Integer... progress) {
			super.onProgressUpdate(progress);
			Log.i("break","oka" );
			// if we get here, length is known, now set indeterminate to false
			mProgressDialog.setIndeterminate(false);
			mProgressDialog.setMax(100);
			mProgressDialog.setProgress(progress[0]);
		}

		@Override
		protected void onPostExecute(String result) {
			mWakeLock.release();
			mProgressDialog.dismiss();
			if (result != null) {
				Toast.makeText(context, "Download error: " + result,
						Toast.LENGTH_LONG).show();
				Log.d("error", result);
			} else
				Toast.makeText(context, "File downloaded", Toast.LENGTH_SHORT)
						.show();
		}
	}


	
}