package com.litchi.iguardian;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import com.google.android.gcm.GCMRegistrar;

import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.util.Log;

public class SessionManagement {
	// Shared Preferences
	SharedPreferences pref;

	SharedPreferences pref2;
	// private MySQLiteHelper delete_helper ;

	private UserDataSource datasource;
	List<String> user_name;
	List<String> school_db;

	HttpPost httppost;
	InputStream isr = null;
	String result = "";
	StringBuffer buffer;
	HttpResponse response;
	HttpClient httpclient;
	List<NameValuePair> nameValuePairs;

	// Editor for Shared preferences
	Editor editor;

	//Editor editor2;

	// Context
	Context _context;

	// Shared pref mode
	int PRIVATE_MODE = 0;

	// Sharedpref file name
	private static final String PREF_NAME = "iguardian";

	// All Shared Preferences Keys
	private static final String IS_LOGIN = "IsLoggedIn";

	// User name (make variable public to access from outside)
	public static final String KEY_NAME = "name";

	// Email address (make variable public to access from outside)
	// public static final String KEY_SCHOOL = "school";

	public static final String KEY_DB = "DB";

	//public static final String REG_ID = "ID";

	// Constructor
	public SessionManagement(Context context) {
		this._context = context;
		pref = _context.getSharedPreferences(PREF_NAME, PRIVATE_MODE);
		pref2 = _context.getSharedPreferences(PREF_NAME, PRIVATE_MODE);
		editor = pref.edit();
		editor2 = pref2.edit();
		datasource = new UserDataSource(context);
		// datasource.open();
	}

	/**
	 * Create login session
	 * */
	public void createLoginSession(String username, String db) {
		// Storing login value as TRUE
		editor.putBoolean(IS_LOGIN, true);

		// Storing name in pref
		editor.putString(KEY_NAME, username);

		// Storing email in pref
		// editor.putString(KEY_SCHOOL, school);

		editor.putString(KEY_DB, db);

		// commit changes
		editor.commit();
	}

	/*public void register_id(String reg_id) {

		editor2.putString(REG_ID, reg_id);

		// commit changes
		editor2.commit();
	}*/

	/**
	 * Check login method wil check user login status If false it will redirect
	 * user to login page Else won't do anything
	 * */
	public int checkLogin() {
		Log.i("Value of ", "check");
		// Check login status
		if (!this.isLoggedIn()) {

			// ((Activity)_context).finish();
			/*
			 * Intent i = new Intent(_context, LoginActivity.class);
			 * 
			 * i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			 * 
			 * 
			 * // Add new Flag to start new Activity
			 * i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			 * 
			 * 
			 * // Staring Login Activity _context.startActivity(i);
			 */
			// ((Activity)_context).finish();
			// _context.startActivityForResult(i, requestCode);

			return 1;
		}
		return 0;
	}

	/**
	 * Get stored session data
	 * */
	public HashMap<String, String> getUserDetails() {
		HashMap<String, String> user = new HashMap<String, String>();
		// user name
		user.put(KEY_NAME, pref.getString(KEY_NAME, null));

		// user email id
		// user.put(KEY_SCHOOL, pref.getString(KEY_SCHOOL, null));
		user.put(KEY_DB, pref.getString(KEY_DB, null));

		// return user
		return user;
	}

	/*public HashMap<String, String> get_reg_id() {
		HashMap<String, String> reg_id = new HashMap<String, String>();
		// user name
		// user.put(KEY_NAME, pref.getString(KEY_NAME, null));

		// user email id
		// user.put(KEY_SCHOOL, pref.getString(KEY_SCHOOL, null));
		reg_id.put(REG_ID, pref2.getString(REG_ID, null));

		// return user
		return reg_id;
	}*/

	/**
	 * Clear session details
	 * */
	public void logoutUser() {
		// Clearing all data from Shared Preferences
		editor.clear();
		editor.commit();

		// datasource.close();

		datasource.open();
		user_name = datasource.get_user_name();
		school_db = datasource.get_school_db();
		
		datasource.deletetable();
		datasource.close();

		new delete_reg_id().execute();

		// final delete_reg_id delete_reg_id = new delete_reg_id();
		// delete_reg_id.execute();

		/*
		 * HashMap<String, String> regId = getUserDetails(); String username =
		 * regId.get(SessionManagement.REG_ID);
		 */// String registrstion_id = REG_ID;

		// After logout redirect user to Loing Activity
		Intent i = new Intent(_context, LoginActivity.class);
		// Closing all the Activities
		// i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NO_HISTORY);
		i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);

		// Add new Flag to start new Activity
		i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		// i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		// i.putExtra("EXIT", true);
		// Staring Login Activity
		_context.startActivity(i);

	}

	/**
	 * Quick check for login
	 * **/
	// Get Login State
	public boolean isLoggedIn() {
		return pref.getBoolean(IS_LOGIN, false);
	}

	private class delete_reg_id extends AsyncTask<Void, Void, String> {

		@Override
		protected String doInBackground(Void... params) {
			Log.i("aqaqa", "p0");
			try {

				// HashMap<String, String> user = sess.getUserDetails();
				// username = user.get(SessionManagement.KEY_NAME);
				// school_db = user.get(SessionManagement.KEY_DB);
				//JSONArray devices = new JSONArray();
				
				Log.i("aqaqa", "p1");
				httpclient = new DefaultHttpClient();
				Log.i("aqaqa", "p2");
				httppost = new HttpPost(
						"http://npaneer.iguardianerp.co.in/delete_registration_id.php");
				Log.i("aqaqa", "p3");
				nameValuePairs = new ArrayList<NameValuePair>();
				Log.i("aqaqa", "p4");
				
				//HashMap<String, String> user = get_reg_id();
				String reg = GCMIntentService.reg_id ;
				// tv.setText("vhpppi");
				// String[] name = {"asas", "aas"};
				nameValuePairs.add(new BasicNameValuePair("reg_id", reg)); // $Edittext_value
				// =
				Log.i("id", reg);
				String u = user_name.get(0);
				Log.i("aqaqa", "p6");
				//Log.i("aqaqa", u);
				for (int i = 0; i < user_name.size(); i++) {
					nameValuePairs.add(new BasicNameValuePair("username[]",
							user_name.get(i)));
					Log.i("user", user_name.get(i));

					nameValuePairs.add(new BasicNameValuePair("dbSelected[]",
							school_db.get(i)));
					Log.i("school",school_db.get(i));
				}
				Log.i("aqaqa", "p7");

				// tv.setText("vhisjdskdj");
				/*JSONObject json = new JSONObject();
				
				for (int i = 0; i < user_name.size(); i++) {
					json.put("username", user_name.get(i));
		            json.put("dbSelected", school_db.get(i));
		 
					
				}
				
				
	            JSONArray postjson=new JSONArray();
	            postjson.put(json);
	 
	            // Post the data:
	            httppost.setHeader("json",json.toString());
	            httppost.getParams().setParameter("jsonpost",postjson);
	 */
				
				
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

				HttpResponse response = httpclient.execute(httppost);
				/*HttpEntity entity = response.getEntity();
				isr = entity.getContent();*/

			} // try terminated

			catch (Exception e) {
				// dialog.dismiss();
				System.out.println("Exception : " + e.getMessage());
				e.printStackTrace();
				// InternetAlert();
			}

			return null;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();

			Log.i("break", "4");
		}

		@Override
		protected void onPostExecute(String result) {

		}
	}

}
